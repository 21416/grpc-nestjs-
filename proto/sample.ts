// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v3.20.3
// source: proto/sample.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "sample";

export interface TakesReq {
  id: number;
}

export interface ReturnRes {
  id: number;
}

export interface Empty {
}

export interface Logs {
  Id: string;
  wamid: string;
  cId: string;
  cNo: string;
  mes: string;
  dir: string;
  st: string;
  ca: string;
  ua: string;
  aId: string;
}

export interface MessageLogResponse {
  messageLogs: Logs[];
}

export const SAMPLE_PACKAGE_NAME = "sample";

export interface SampleServiceClient {
  sendSample(request: TakesReq): Observable<ReturnRes>;

  mongoDbData(request: Empty): Observable<MessageLogResponse>;
}

export interface SampleServiceController {
  sendSample(request: TakesReq): Promise<ReturnRes> | Observable<ReturnRes> | ReturnRes;

  mongoDbData(request: Empty): Promise<MessageLogResponse> | Observable<MessageLogResponse> | MessageLogResponse;
}

export function SampleServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendSample", "mongoDbData"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SampleService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SampleService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SAMPLE_SERVICE_NAME = "SampleService";
